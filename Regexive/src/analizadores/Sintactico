package analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList; 
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import modelos.ExpresionEvaluar;
import modelos.ErrorFile;

import modelos.Conjunto;
import modelos.Nodo;
import modelos.Tipo;
import modelos.Siguiente;

import modelos.ExpresionRegular;
import modelos.Grafo;

parser code 
{:
    public static ArrayList<ExpresionEvaluar> listaExpEvaluar = new ArrayList<ExpresionEvaluar>();
    public static ArrayList<ExpresionRegular> listaExpresiones = new ArrayList<ExpresionRegular>();
    public static ArrayList<Conjunto> listaConjuntos = new ArrayList<Conjunto>();
    public static ArrayList<ErrorFile> listaErrores = new ArrayList<ErrorFile>();

    int contadorHojas = 1;

    public static ArrayList<Siguiente> listaSiguientes = new ArrayList<Siguiente>();

    public void calculoSiguiente(Nodo raiz) {
        Nodo nodoIzq = raiz.getIzquierdo();
        Nodo nodoDer = raiz.getDerecho();

        if (raiz.getTipo() == Tipo.ASTERISCO || raiz.getTipo() == Tipo.MAS) { 
            // A cada uno de los ultimos izquierdos se le agregaran los primeros izquierdos
            for(int i=0; i<nodoIzq.getUltimos().size(); i++) {
                int pos = nodoIzq.getUltimos().get(i)-1;              
                listaSiguientes.get(pos).getSiguientes().addAll(nodoIzq.getPrimeros());
            }
        }

        if (raiz.getTipo() == Tipo.AND) {
            // A cada uno de los ultimos izquierdos se le agregan los primeros derechos
            for(int i=0; i<nodoIzq.getUltimos().size(); i++) {
                int pos = nodoIzq.getUltimos().get(i)-1;
                listaSiguientes.get(pos).getSiguientes().addAll(nodoDer.getPrimeros());
            }
        }
    }

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        int fila = s.left;
        int columna = s.right;

        if (fila != -1) {
            ErrorFile newError = new ErrorFile(fila, columna, s.value.toString(), "Sintactico");
            listaErrores.add(newError);

            System.out.println("Error Sintáctico en la Línea " + (s.left) +
            " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        int fila = s.left;
        int columna = s.right;

        if (fila != -1) {
            ErrorFile newError = new ErrorFile(fila, columna, s.value.toString(), "Sintactico");
            listaErrores.add(newError);

            System.out.println("Error síntactico irrecuperable en la Línea " + 
            (s.left)+ " Columna "+s.right+". Componente " + s.value + 
            " no reconocido.");
        } 
    }  
:} 

terminal String CONJ;
terminal String ptcoma, dospuntos, menos, mayor, porcentaje;
terminal String llaveIzq, llaveDer;
terminal String mas, interrogacion, asterisco, pleca, punto, coma;
terminal String CADENA, CARACTER, virgu, ASCII, ID;

non terminal INICIO;
non terminal CONTENIDO, DECLARACIONES, EVALUACIONES;
non terminal DECLARACION, EVALUACION;
non terminal Conjunto LISTACARACTERES;
non terminal EXPRESION;

start with INICIO; 

INICIO ::= llaveIzq CONTENIDO llaveDer 
    {:
        System.out.println("¡El analisis fue completado!");
    :}
;

CONTENIDO ::= DECLARACIONES porcentaje porcentaje porcentaje porcentaje EVALUACIONES;

DECLARACIONES ::=
    DECLARACIONES DECLARACION
    | DECLARACION
;

EVALUACIONES ::=
    EVALUACIONES EVALUACION
    | EVALUACION
;

EVALUACION ::= 
    ID:nombre_exp dospuntos CADENA:valor ptcoma 
    {:
        ExpresionEvaluar nuevaExpEvaluar = new ExpresionEvaluar(nombre_exp, valor.substring(1,valor.length()-1));
        listaExpEvaluar.add(nuevaExpEvaluar);
        System.out.println("Evaluacion: " + nombre_exp + ":" + valor + " procesado");
    :}
    | error ptcoma
;

DECLARACION ::=
    CONJ dospuntos ID:nombre_conj menos mayor ASCII:a virgu ASCII:b ptcoma 
    {:
        Conjunto nuevoConj = new Conjunto(nombre_conj, a, b);
        listaConjuntos.add(nuevoConj);
        System.out.println("Conjunto: " + nombre_conj + " procesado");
    :}
    | CONJ dospuntos ID:nombre_conj menos mayor ASCII:a LISTACARACTERES:conjunto ptcoma 
    {:
        conjunto.agregarElemento(a);
        conjunto.setNombre(nombre_conj);
        listaConjuntos.add(conjunto);
        System.out.println("Conjunto: " + nombre_conj + " procesado");
    :}
    | ID:nombre_expr menos mayor EXPRESION:nodo ptcoma {:
        Nodo nodoIzq = (Nodo) nodo;
        
        boolean anulable = false; 
        Nodo nodoRaiz = new Nodo(".", Tipo.AND, 0, anulable);

        Nodo nodoAceptacion = new Nodo("#", Tipo.ACEPTACION, contadorHojas, anulable);
        nodoAceptacion.agregarPrimero(contadorHojas);
        nodoAceptacion.agregarUltimo(contadorHojas);
        listaSiguientes.add(new Siguiente(contadorHojas, "#"));

        nodoRaiz.setIzquierdo(nodoIzq);    
        nodoRaiz.setDerecho(nodoAceptacion);
        nodoRaiz.calcularPrimerosUltimos();

        calculoSiguiente(nodoRaiz);
        
        for(Siguiente siguiente: listaSiguientes) {
            Collections.sort(siguiente.getSiguientes());
            
            Set hs = new HashSet<>();
            hs.addAll(siguiente.getSiguientes());
            
            siguiente.getSiguientes().clear();
            siguiente.getSiguientes().addAll(hs);
        }
        
        // Agregar expresion regular
        ExpresionRegular nuevaExpReg = new ExpresionRegular(nombre_expr, nodoRaiz, listaSiguientes);
        listaExpresiones.add(nuevaExpReg);

        // Crear todos los graficos
        Grafo nuevosGrafos = new Grafo(nuevaExpReg);
        nuevosGrafos.generarGrafoArbol();
        nuevosGrafos.generarAFN();
        nuevosGrafos.generarTablaSiguientes();
        nuevosGrafos.generarTablaTransiciones();
        nuevosGrafos.generarAFD();
        
        System.out.println("Expresion regular: " + nombre_expr + " procesada");
        listaSiguientes.clear();
        contadorHojas = 1;
    :}
    | error ptcoma
;

LISTACARACTERES ::=
    LISTACARACTERES:lista coma ASCII:a 
    {:
        lista.agregarElemento(a);
        RESULT = lista;
    :}
    | coma ASCII:a 
    {:
        RESULT = new Conjunto();
        RESULT.agregarElemento(a);
    :}
;

EXPRESION ::=
    punto EXPRESION:izq EXPRESION:der 
    {:
        Nodo nodoIzq = (Nodo) izq;
        Nodo nodoDer = (Nodo) der;

        boolean anulable = false; // Temporal
        Nodo nuevoNodo = new Nodo(".", Tipo.AND, 0, anulable);

        nuevoNodo.setIzquierdo(nodoIzq);
        nuevoNodo.setDerecho(nodoDer);
        nuevoNodo.calcularAnulable();
        nuevoNodo.calcularPrimerosUltimos();

        calculoSiguiente(nuevoNodo);

        RESULT = nuevoNodo;
    :}
    | pleca EXPRESION:izq EXPRESION:der 
    {:  
        Nodo nodoIzq = (Nodo) izq;
        Nodo nodoDer = (Nodo) der;

        boolean anulable = false; // Temporal
        Nodo nuevoNodo = new Nodo("|", Tipo.OR, 0, anulable);
        
        nuevoNodo.setIzquierdo(nodoIzq);
        nuevoNodo.setDerecho(nodoDer);
        nuevoNodo.calcularAnulable();
        nuevoNodo.calcularPrimerosUltimos();
             
        RESULT = nuevoNodo;
    :}
    | asterisco EXPRESION:nodo 
    {:
        Nodo nodoInferior = (Nodo) nodo;
        
        boolean anulable = true;
        Nodo nuevoNodo = new Nodo("*", Tipo.ASTERISCO, 0, anulable);
        
        nuevoNodo.setIzquierdo(nodoInferior);
        nuevoNodo.setPrimeros(nodoInferior.getPrimeros());
        nuevoNodo.setUltimos(nodoInferior.getUltimos());
        
        calculoSiguiente(nuevoNodo);

        RESULT = nuevoNodo;
    :}
    | mas EXPRESION:nodo 
    {:
        Nodo nodoInferior = (Nodo) nodo;
        
        boolean anulable = false; // Temporal
        Nodo nuevoNodo = new Nodo("+", Tipo.MAS, 0, anulable);
  
        nuevoNodo.setIzquierdo(nodoInferior);    
        nuevoNodo.setPrimeros(nodoInferior.getPrimeros());
        nuevoNodo.setUltimos(nodoInferior.getUltimos());
        nuevoNodo.calcularAnulable();
        
        calculoSiguiente(nuevoNodo);
            
        RESULT = nuevoNodo;
    :}
    | interrogacion EXPRESION:nodo 
    {:
        Nodo nodoInferior = (Nodo) nodo;
        
        boolean anulable = true;
        Nodo nuevoNodo = new Nodo("?", Tipo.INTERROGACION, 0, anulable);  
         
        nuevoNodo.setPrimeros(nodoInferior.getPrimeros());
        nuevoNodo.setUltimos(nodoInferior.getUltimos());
        nuevoNodo.setIzquierdo(nodoInferior);
        
        RESULT = nuevoNodo;
    :}
    | llaveIzq ID:nombre_conj llaveDer 
    {:  
        String nombreConjunto = nombre_conj;
        boolean anulable = false;
        Nodo nuevoNodo = new Nodo(nombreConjunto, Tipo.CONJUNTO, contadorHojas, anulable);
        
        nuevoNodo.agregarPrimero(contadorHojas);
        nuevoNodo.agregarUltimo(contadorHojas);

        listaSiguientes.add(new Siguiente(contadorHojas, nombreConjunto));
        
        contadorHojas++;
        RESULT = nuevoNodo;  
    :}
    | CADENA:cadena 
    {:
        String txtCadena = cadena.substring(1,cadena.length()-1); // Quitar comillas
        boolean anulable = false;
        Nodo nuevoNodo = new Nodo(txtCadena, Tipo.CADENA, contadorHojas, anulable);
        
        nuevoNodo.agregarPrimero(contadorHojas);
        nuevoNodo.agregarUltimo(contadorHojas);

        listaSiguientes.add(new Siguiente(contadorHojas, txtCadena));

        contadorHojas++;
        RESULT = nuevoNodo;  
    :}
    | CARACTER:caracter
    {:
        String charEspecial = caracter;
        boolean anulable = false;
        Nodo nuevoNodo = new Nodo(caracter, Tipo.CARACTERESPECIAL, contadorHojas, anulable);
        
        nuevoNodo.agregarPrimero(contadorHojas);
        nuevoNodo.agregarUltimo(contadorHojas);

        listaSiguientes.add(new Siguiente(contadorHojas, charEspecial));

        contadorHojas++;
        RESULT = nuevoNodo;
    :}
;

