package analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList; 
import modelos.ExpresionEvaluar;
import modelos.Conjunto;
import modelos.Tree;
import modelos.node;
import modelos.followTable;
import modelos.transitionTable;
import modelos.ErrorFile;
import modelos.Expresion;

parser code 
{:
    public static ArrayList<ExpresionEvaluar> listaExpEvaluar = new ArrayList<ExpresionEvaluar>();
    public static ArrayList<Expresion> listaExpresiones = new ArrayList<Expresion>();
    public static ArrayList<Conjunto> listaConjuntos = new ArrayList<Conjunto>();
    public static ArrayList<ErrorFile> listaErrores = new ArrayList<ErrorFile>();

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        int fila = s.left;
        int columna = s.right;

        ErrorFile newError = new ErrorFile(fila, columna, s.value.toString(), "Sintactico");
        listaErrores.add(newError);
        
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        int fila = s.left;
        int columna = s.right;

        ErrorFile newError = new ErrorFile(fila, columna, s.value.toString(), "Sintactico");
        listaErrores.add(newError);
        
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String CONJ;
terminal String ptcoma, dospuntos, menos, mayor, porcentaje;
terminal String llaveIzq, llaveDer;
terminal String mas, interrogacion, asterisco, pleca, punto, coma;
terminal String CADENA, CARACTER, virgu, ASCII, ID;

non terminal INICIO;
non terminal CONTENIDO, DECLARACIONES, EVALUACIONES;
non terminal DECLARACION, EVALUACION;
non terminal Conjunto LISTACARACTERES;
non terminal EXPRESION;

start with INICIO; 

INICIO ::= llaveIzq CONTENIDO llaveDer 
    {:
        System.out.println("¡El analisis fue completado!");
    :}
;

CONTENIDO ::= DECLARACIONES porcentaje porcentaje porcentaje porcentaje EVALUACIONES;

DECLARACIONES ::=
    DECLARACIONES DECLARACION
    | DECLARACION
;

EVALUACIONES ::=
    EVALUACIONES EVALUACION
    | EVALUACION
;

EVALUACION ::= 
    ID:nombre_exp dospuntos CADENA:valor ptcoma 
    {:
        ExpresionEvaluar nuevaExpEvaluar = new ExpresionEvaluar(nombre_exp, valor.substring(1,valor.length()-1));
        listaExpEvaluar.add(nuevaExpEvaluar);
    :}
;

DECLARACION ::=
    CONJ dospuntos ID:nombre_conj menos mayor ASCII:a virgu ASCII:b ptcoma 
    {:
        Conjunto nuevoConj = new Conjunto(nombre_conj, a, b);
        listaConjuntos.add(nuevoConj);
    :}
    | CONJ dospuntos ID:nombre_conj menos mayor ASCII:a LISTACARACTERES:conjunto ptcoma 
    {:
        conjunto.agregarElemento(a);
        conjunto.setNombre(nombre_conj);
        listaConjuntos.add(conjunto);
    :}
    | ID:nombre_expr menos mayor EXPRESION:expr ptcoma {:
        String expresion = "." + expr + "#";
        
        System.out.println(expresion);
        ArrayList<node> leaves = new ArrayList();
        ArrayList<ArrayList> table = new ArrayList();

        Tree arbol = new Tree(expresion, leaves, table, nombre_expr);
        node raiz = arbol.getRoot();
        raiz.getNode();
        raiz.follow();
        arbol.crearGrafoArbol();
  
        followTable ft = new followTable(nombre_expr);
        ft.crearGrafoSiguientes(table);
    
        transitionTable tran = new transitionTable(raiz, table, leaves, nombre_expr);
        tran.crearGrafoTransiciones();
        tran.crearGrafoAutomata();

        Expresion nuevaExpReg = new Expresion(nombre_expr, raiz, tran.states);
        listaExpresiones.add(nuevaExpReg);

        ft.printTable(table);
        tran.impTable();
        System.out.println("-------------------------------");
    :}
;

LISTACARACTERES ::=
    LISTACARACTERES:lista coma ASCII:a 
    {:
        lista.agregarElemento(a);
        RESULT = lista;
    :}
    | coma ASCII:a 
    {:
        RESULT = new Conjunto();
        RESULT.agregarElemento(a);
    :}
;

EXPRESION ::=
    punto EXPRESION:a EXPRESION:b 
    {:
        RESULT = "."+a+b;
    :}
    | pleca EXPRESION:a EXPRESION:b 
    {:
        RESULT = "|"+a+b;
    :}
    | asterisco EXPRESION:a 
    {:
        RESULT = "*"+a;
    :}
    | mas EXPRESION:a 
    {:
        RESULT = "+"+a;
    :}
    | interrogacion EXPRESION:a 
    {:
        RESULT = "?"+a;
    :}
    | llaveIzq ID:id llaveDer 
    {:
        RESULT = "{" + id + "}";
    :}
    | CADENA:a 
    {:
        RESULT = a;
    :}
    | CARACTER:a 
    {:
        RESULT = a;
    :}
;

